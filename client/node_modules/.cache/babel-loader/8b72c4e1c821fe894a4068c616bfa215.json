{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { UPDATE_PRODUCTS, UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY, ADD_TO_CART, ADD_MULTIPLE_TO_CART, REMOVE_FROM_CART, UPDATE_CART_QUANTITY, CLEAR_CART, TOGGLE_CART } from \"./actions\";\nimport { useReducer } from \"react\";\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    // if action type value is the value of 'UPDATE_PRODUCTS', return a new state object with an updated products array\n    case UPDATE_PRODUCTS:\n      return { ...state,\n        products: [...action.products]\n      };\n    // if action type value is the value of 'UPDATE_CATEGORIES', return a new state object with an updated categories array\n\n    case UPDATE_CATEGORIES:\n      return { ...state,\n        categories: [...action.categories]\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return { ...state,\n        currentCategory: action.currentCategory\n      };\n\n    case ADD_TO_CART:\n      return { ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product]\n      };\n\n    case ADD_MULTIPLE_TO_CART:\n      return { ...state,\n        cart: [...state.cart, ...action.products]\n      };\n\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n      return { ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n\n    case UPDATE_CART_QUANTITY:\n      return { ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n\n          return product;\n        })\n      };\n\n    case CLEAR_CART:\n      return { ...state,\n        cartOpen: false,\n        cart: []\n      };\n\n    case TOGGLE_CART:\n      return { ...state,\n        cartOpen: !state.cartOpen\n      };\n    //if its none of the actions, do not update state at all and keep things the same!\n\n    default:\n      return state;\n  }\n};\nexport function useProductReducer(initialState) {\n  _s();\n\n  return useReducer(reducer, initialState);\n}\n\n_s(useProductReducer, \"skVOqNGrFQuDFh+lpttAJ2AZFeA=\");","map":{"version":3,"names":["UPDATE_PRODUCTS","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","CLEAR_CART","TOGGLE_CART","useReducer","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","_id","length","map","purchaseQuantity","useProductReducer","initialState"],"sources":["C:/Users/jvit1/Desktop/projects/list-hub/client/src/utils/reducers.js"],"sourcesContent":["import {\r\n    UPDATE_PRODUCTS,\r\n    UPDATE_CATEGORIES,\r\n    UPDATE_CURRENT_CATEGORY,\r\n    ADD_TO_CART,\r\n    ADD_MULTIPLE_TO_CART,\r\n    REMOVE_FROM_CART,\r\n    UPDATE_CART_QUANTITY,\r\n    CLEAR_CART,\r\n    TOGGLE_CART\r\n} from \"./actions\";\r\n\r\nimport { useReducer } from \"react\";\r\n\r\nexport const reducer = (state, action) => {\r\n    switch (action.type) {\r\n        // if action type value is the value of 'UPDATE_PRODUCTS', return a new state object with an updated products array\r\n        case UPDATE_PRODUCTS:\r\n            return {\r\n                ...state,\r\n                products: [...action.products],\r\n            };\r\n        // if action type value is the value of 'UPDATE_CATEGORIES', return a new state object with an updated categories array\r\n        case UPDATE_CATEGORIES:\r\n            return {\r\n                ...state,\r\n                categories: [...action.categories]\r\n            };\r\n        case UPDATE_CURRENT_CATEGORY:\r\n            return {\r\n                ...state,\r\n                currentCategory: action.currentCategory\r\n            };\r\n        case ADD_TO_CART:\r\n            return {\r\n                ...state,\r\n                cartOpen: true,\r\n                cart: [...state.cart, action.product]\r\n            };\r\n        case ADD_MULTIPLE_TO_CART:\r\n            return {\r\n                ...state,\r\n                cart: [...state.cart, ...action.products],\r\n            };\r\n        case REMOVE_FROM_CART:\r\n            let newState = state.cart.filter(product => {\r\n                return product._id !== action._id;\r\n            });\r\n\r\n            return {\r\n                ...state,\r\n                cartOpen: newState.length > 0,\r\n                cart: newState\r\n            };\r\n        case UPDATE_CART_QUANTITY:\r\n            return {\r\n                ...state,\r\n                cartOpen: true,\r\n                cart: state.cart.map(product => {\r\n                    if (action._id === product._id) {\r\n                        product.purchaseQuantity = action.purchaseQuantity;\r\n                    }\r\n                    return product;\r\n                })\r\n            };\r\n        case CLEAR_CART:\r\n            return {\r\n                ...state,\r\n                cartOpen: false,\r\n                cart: []\r\n            };\r\n        case TOGGLE_CART:\r\n            return {\r\n                ...state,\r\n                cartOpen: !state.cartOpen\r\n            };\r\n        //if its none of the actions, do not update state at all and keep things the same!\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport function useProductReducer(initialState) {\r\n    return useReducer(reducer, initialState);\r\n}"],"mappings":";;AAAA,SACIA,eADJ,EAEIC,iBAFJ,EAGIC,uBAHJ,EAIIC,WAJJ,EAKIC,oBALJ,EAMIC,gBANJ,EAOIC,oBAPJ,EAQIC,UARJ,EASIC,WATJ,QAUO,WAVP;AAYA,SAASC,UAAT,QAA2B,OAA3B;AAEA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EACtC,QAAQA,MAAM,CAACC,IAAf;IACI;IACA,KAAKb,eAAL;MACI,OAAO,EACH,GAAGW,KADA;QAEHG,QAAQ,EAAE,CAAC,GAAGF,MAAM,CAACE,QAAX;MAFP,CAAP;IAIJ;;IACA,KAAKb,iBAAL;MACI,OAAO,EACH,GAAGU,KADA;QAEHI,UAAU,EAAE,CAAC,GAAGH,MAAM,CAACG,UAAX;MAFT,CAAP;;IAIJ,KAAKb,uBAAL;MACI,OAAO,EACH,GAAGS,KADA;QAEHK,eAAe,EAAEJ,MAAM,CAACI;MAFrB,CAAP;;IAIJ,KAAKb,WAAL;MACI,OAAO,EACH,GAAGQ,KADA;QAEHM,QAAQ,EAAE,IAFP;QAGHC,IAAI,EAAE,CAAC,GAAGP,KAAK,CAACO,IAAV,EAAgBN,MAAM,CAACO,OAAvB;MAHH,CAAP;;IAKJ,KAAKf,oBAAL;MACI,OAAO,EACH,GAAGO,KADA;QAEHO,IAAI,EAAE,CAAC,GAAGP,KAAK,CAACO,IAAV,EAAgB,GAAGN,MAAM,CAACE,QAA1B;MAFH,CAAP;;IAIJ,KAAKT,gBAAL;MACI,IAAIe,QAAQ,GAAGT,KAAK,CAACO,IAAN,CAAWG,MAAX,CAAkBF,OAAO,IAAI;QACxC,OAAOA,OAAO,CAACG,GAAR,KAAgBV,MAAM,CAACU,GAA9B;MACH,CAFc,CAAf;MAIA,OAAO,EACH,GAAGX,KADA;QAEHM,QAAQ,EAAEG,QAAQ,CAACG,MAAT,GAAkB,CAFzB;QAGHL,IAAI,EAAEE;MAHH,CAAP;;IAKJ,KAAKd,oBAAL;MACI,OAAO,EACH,GAAGK,KADA;QAEHM,QAAQ,EAAE,IAFP;QAGHC,IAAI,EAAEP,KAAK,CAACO,IAAN,CAAWM,GAAX,CAAeL,OAAO,IAAI;UAC5B,IAAIP,MAAM,CAACU,GAAP,KAAeH,OAAO,CAACG,GAA3B,EAAgC;YAC5BH,OAAO,CAACM,gBAAR,GAA2Bb,MAAM,CAACa,gBAAlC;UACH;;UACD,OAAON,OAAP;QACH,CALK;MAHH,CAAP;;IAUJ,KAAKZ,UAAL;MACI,OAAO,EACH,GAAGI,KADA;QAEHM,QAAQ,EAAE,KAFP;QAGHC,IAAI,EAAE;MAHH,CAAP;;IAKJ,KAAKV,WAAL;MACI,OAAO,EACH,GAAGG,KADA;QAEHM,QAAQ,EAAE,CAACN,KAAK,CAACM;MAFd,CAAP;IAIJ;;IACA;MACI,OAAON,KAAP;EA/DR;AAiEH,CAlEM;AAoEP,OAAO,SAASe,iBAAT,CAA2BC,YAA3B,EAAyC;EAAA;;EAC5C,OAAOlB,UAAU,CAACC,OAAD,EAAUiB,YAAV,CAAjB;AACH;;GAFeD,iB"},"metadata":{},"sourceType":"module"}